/*
    SPDX-FileCopyrightText: 2020-2024 Jakub Stankowski <jakub.stankowski@put.poznan.pl>
    SPDX-License-Identifier: BSD-3-Clause
*/
#include "xJPEG_TransformConstants.h"

namespace PMBB_NAMESPACE::JPEG {

//=============================================================================================================================================================================

//#include <iostream>
//#include <cmath>
//
//using namespace std;
//
//int main()
//{
//  float CoeffFLT[8][8];
//  int   CoeffI8 [8][8];
//  int   CoeffI16[8][8];
//
//  for(int i=0; i<8; i++)
//  {
//    for(int j=0; j<8; j++)
//    {
//      CoeffFLT[i][j] = cos(((2*(float)j + 1) * 3.14159265 * (float)i) / 16);
//      if(i!=0) CoeffFLT[i][j] *= sqrt(2); 
//      CoeffI8 [i][j] = (int)round(CoeffFLT[i][j] * (float)((int)1<<6 ));
//      CoeffI16[i][j] = (int)round(CoeffFLT[i][j] * (float)((int)1<<14));
//    }
//  }
//  printf("Fwd FLT\n");
//  for(int i=0; i<8; i++) { for(int j=0; j<8; j++) { printf("%9f, ", CoeffFLT[i][j]); } printf("\n"); } printf("\n");
//  printf("Inv FLT\n");
//  for(int i=0; i<8; i++) { for(int j=0; j<8; j++) { printf("%9f, ", CoeffFLT[j][i]); } printf("\n"); } printf("\n");
//  printf("Fwd INT M8\n");
//  for(int i=0; i<8; i++) { for(int j=0; j<8; j++) { printf("%3d, ", CoeffI8 [i][j]); } printf("\n"); } printf("\n");
//  printf("Inv INT M8\n");
//  for(int i=0; i<8; i++) { for(int j=0; j<8; j++) { printf("%3d, ", CoeffI8 [j][i]); } printf("\n"); } printf("\n");
//  printf("Fwd INT M16\n");
//  for(int i=0; i<8; i++) { for(int j=0; j<8; j++) { printf("%6d, ", CoeffI16[i][j]); } printf("\n"); } printf("\n");
//  printf("Inv INT M16\n");
//  for(int i=0; i<8; i++) { for(int j=0; j<8; j++) { printf("%6d, ", CoeffI16[j][i]); } printf("\n"); } printf("\n");
//
//
//  return 0;
//}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// constants for direct mutiplication method
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const flt32 xTransformConstants::c_TrM_DCT8x8_FLT[8][8]
{
  { 1.000000f,  1.000000f,  1.000000f,  1.000000f,  1.000000f,  1.000000f,  1.000000f,  1.000000f },
  { 1.387040f,  1.175876f,  0.785695f,  0.275899f, -0.275899f, -0.785695f, -1.175876f, -1.387040f },
  { 1.306563f,  0.541196f, -0.541196f, -1.306563f, -1.306563f, -0.541196f,  0.541196f,  1.306563f },
  { 1.175876f, -0.275899f, -1.387040f, -0.785695f,  0.785695f,  1.387040f,  0.275899f, -1.175876f },
  { 1.000000f, -1.000000f, -1.000000f,  1.000000f,  1.000000f, -1.000000f, -1.000000f,  1.000000f },
  { 0.785695f, -1.387040f,  0.275899f,  1.175876f, -1.175876f, -0.275899f,  1.387040f, -0.785695f },
  { 0.541196f, -1.306563f,  1.306563f, -0.541196f, -0.541196f,  1.306563f, -1.306563f,  0.541196f },
  { 0.275899f, -0.785695f,  1.175876f, -1.387040f,  1.387040f, -1.175876f,  0.785695f, -0.275899f },
};
const int8 xTransformConstants::c_TrM_DCT8x8_8bit[8][8]
{
  { 64, 64, 64, 64, 64, 64, 64, 64 },
  { 89, 75, 50, 18,-18,-50,-75,-89 },
  { 84, 35,-35,-84,-84,-35, 35, 84 },
  { 75,-18,-89,-50, 50, 89, 18,-75 },
  { 64,-64,-64, 64, 64,-64,-64, 64 },
  { 50,-89, 18, 75,-75,-18, 89,-50 },
  { 35,-84, 84,-35,-35, 84,-84, 35 },
  { 18,-50, 75,-89, 89,-75, 50,-18 },
};
const int16 xTransformConstants::c_TrM_DCT8x8_16bit[8][8]
{
  { 16384,  16384,  16384,  16384,  16384,  16384,  16384,  16384, },
  { 22725,  19266,  12873,   4520,  -4520, -12873, -19266, -22725, },
  { 21407,   8867,  -8867, -21407, -21407,  -8867,   8867,  21407, },
  { 19266,  -4520, -22725, -12873,  12873,  22725,   4520, -19266, },
  { 16384, -16384, -16384,  16384,  16384, -16384, -16384,  16384, },
  { 12873, -22725,   4520,  19266, -19266,  -4520,  22725, -12873, },
  {  8867, -21407,  21407,  -8867,  -8867,  21407, -21407,   8867, },
  {  4520, -12873,  19266, -22725,  22725, -19266,  12873,  -4520, },
};

//=============================================================================================================================================================================

} //end of namespace PMBB::JPEG